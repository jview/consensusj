/*
 * CLI tool support library and `cj-bitcoin-cli` tool.
 * `cj-bitcoin-cli` tool is compiled to a native command-line tool with Graal `native-image`
 */
dependencies {
    compile project(':bitcoinj-rpcclient')

    compile 'commons-cli:commons-cli:1.4'
    
    runtime "org.slf4j:slf4j-simple:${slf4jVersion}"
}



def mainClassName = "com.msgilligan.bitcoinj.cli.BitcoinCLITool"

jar {
    manifest {
        attributes 'Implementation-Title': 'ConsensusJ Bitcoin CLI support',
                    'Implementation-Version': version,
                    'Main-Class': mainClassName
    }
}

// Compile a native image using Graal's native-image tool
// Graal must be installed at $GRAAL_HOME
task graalNativeImage(type:Exec, dependsOn: jar) {
    workingDir = projectDir
    executable = "${System.env.GRAAL_HOME}/bin/native-image"
    args = [ '--verbose',
             '-cp', configurations.runtime.asPath,
             '-jar', jar.archivePath,
             '-H:Path=build',
             '-H:Name=cj-bitcoin-cli',
             '-H:ReflectionConfigurationFiles=graal-reflection-config.json',
             '-H:EnableURLProtocols=http',
             '-H:+ReportUnsupportedElementsAtRuntime'
    ]
}


// Test Structure
sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

task regTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperty 'java.util.logging.config.file', "${project.projectDir}/src/integ/logging.properties"
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'com/msgilligan/bitcoinj/**'
}

group = 'com.msgilligan.bitcoinj'
// artifactId is taken by default, from folder name
version = '0.2.7-SNAPSHOT'

task writeNewPom << {
    pom {
        project {
            inceptionYear '2018'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

