buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
    }
}

plugins {
    id 'com.gradle.build-scan'          version '1.13.4'
    id 'org.asciidoctor.convert'        version '1.5.7'
    id 'com.jfrog.bintray'              version '1.7.3'
    id 'org.ajoberstar.grgit'           version '2.2.0'
    id 'org.ajoberstar.git-publish'     version '0.4.1'
}

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    //apply plugin: 'findbugs'

    version = bitcoinjAddonsVersion     // set in gradle.properties
    group = 'com.msgilligan'

    repositories {
        jcenter()
    }

//    tasks.withType(FindBugs) {
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//    }
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "org.bitcoinj:bitcoinj-core:${bitcoinjVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"

        testCompile "org.codehaus.groovy:groovy:${groovyVersion}:indy"
        testCompile("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }

        testRuntime "net.bytebuddy:byte-buddy:1.6.5"                  // allows Spock to mock classes (in addition to interfaces)
        testRuntime "org.objenesis:objenesis:2.6"                     // Allow Spock to mock classes with constructor arguments
        testRuntime  "org.slf4j:slf4j-jdk14:${slf4jVersion}"          // Runtime implementation of slf4j
    }

    // See http://blog.freeside.co/2014/06/24/gradle-and-groovys-invoke-dynamic-support/
    configurations.all {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy:${groovyVersion}:indy"
            force "org.codehaus.groovy:groovy-json:${groovyVersion}:indy"
        }
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    tasks.withType(JavaCompile) {
        doFirst {
            if (sourceCompatibility == '1.7' && System.env.JDK7_HOME != null) {
                options.bootstrapClasspath = files("$System.env.JDK7_HOME/jre/lib/rt.jar")
                //options.bootClasspath += "$File.pathSeparator$System.env.JDK7_HOME/jre/lib/jce.jar"
                // use the line above as an example to add jce.jar
                // and other specific JDK jars
            }
        }
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
    }
}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'
apply from: 'gradle/bintray.gradle'

group = 'com.msgilligan.bitcoinj'
// artifactId is taken by default, from folder name
version = '0.2.7-SNAPSHOT'

task writeNewPom << {
    pom {
        project {
            inceptionYear '2018'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

build.dependsOn subprojects.build

task buildCI(dependsOn: [build, testReport, javadocAll, asciidoctor])
task jenkinsBuild(dependsOn: buildCI)
